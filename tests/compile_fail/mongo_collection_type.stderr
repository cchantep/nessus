error[E0252]: the name `HasField` is defined multiple times
 --> tests/compile_fail/mongo_collection_type.rs:5:5
  |
3 | use tnuctipun::{FieldWitnesses, MongoComparable, HasField, FieldName};
  |                                                  -------- previous import of the trait `HasField` here
4 | use tnuctipun::mongo_comparable::MongoComparable as MongoComparableTrait;
5 | use tnuctipun::HasField;
  |     ^^^^^^^^^^^^^^^^^^^ `HasField` reimported here
  |
  = note: `HasField` must be defined only once in the type namespace of this module

warning: unused imports: `FieldName` and `HasField`
 --> tests/compile_fail/mongo_collection_type.rs:3:50
  |
3 | use tnuctipun::{FieldWitnesses, MongoComparable, HasField, FieldName};
  |                                                  ^^^^^^^^  ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `tnuctipun::HasField`
 --> tests/compile_fail/mongo_collection_type.rs:5:5
  |
5 | use tnuctipun::HasField;
  |     ^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `CustomProduct: MongoComparable<CustomCollection, std::string::String>` is not satisfied
  --> tests/compile_fail/mongo_collection_type.rs:32:42
   |
32 |     assert_implements_mongo_comparable::<CustomProduct,
   |                                          ^^^^^^^^^^^^^ the trait `MongoComparable<CustomCollection, std::string::String>` is not implemented for `CustomProduct`
   |
   = help: the following other types implement trait `MongoComparable<A, B>`:
             `CustomProduct` implements `MongoComparable<CustomCollection, CustomCollection>`
             `CustomProduct` implements `MongoComparable<std::string::String, std::string::String>`
note: required by a bound in `assert_implements_mongo_comparable`
  --> tests/compile_fail/mongo_collection_type.rs:21:12
   |
19 |     fn assert_implements_mongo_comparable<T, A, B>()
   |        ---------------------------------- required by a bound in this function
20 |     where
21 |         T: MongoComparableTrait<A, B>
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `assert_implements_mongo_comparable`

error[E0277]: `CustomCollection` doesn't implement `Debug`
  --> tests/compile_fail/mongo_collection_type.rs:28:9
   |
25 |     #[derive(Debug, Clone, Serialize, Deserialize, FieldWitnesses, MongoComparable)]
   |              ----- in this derive macro expansion
...
28 |         pub BadCollection: CustomCollection,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CustomCollection` cannot be formatted using `{:?}`
   |
   = help: the trait `Debug` is not implemented for `CustomCollection`
   = note: add `#[derive(Debug)]` to `CustomCollection` or manually `impl Debug for CustomCollection`
help: consider annotating `CustomCollection` with `#[derive(Debug)]`
   |
15 + #[derive(Debug)]
16 | struct CustomCollection;
   |

error[E0277]: the trait bound `CustomCollection: Clone` is not satisfied
  --> tests/compile_fail/mongo_collection_type.rs:28:9
   |
25 |     #[derive(Debug, Clone, Serialize, Deserialize, FieldWitnesses, MongoComparable)]
   |                     ----- in this derive macro expansion
...
28 |         pub BadCollection: CustomCollection,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `CustomCollection`
   |
help: consider annotating `CustomCollection` with `#[derive(Clone)]`
   |
15 + #[derive(Clone)]
16 | struct CustomCollection;
   |

error[E0277]: the trait bound `CustomCollection: Serialize` is not satisfied
  --> tests/compile_fail/mongo_collection_type.rs:25:28
   |
25 |     #[derive(Debug, Clone, Serialize, Deserialize, FieldWitnesses, MongoComparable)]
   |                            ^^^^^^^^^ the trait `Serialize` is not implemented for `CustomCollection`
...
28 |         pub BadCollection: CustomCollection,
   |         --- required by a bound introduced by this call
   |
   = note: for local types consider adding `#[derive(serde::Serialize)]` to your `CustomCollection` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Serialize`:
             &'a T
             &'a mut T
             &bson::raw::array::RawArray
             &bson::raw::document::RawDocument
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and $N others
note: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`
  --> $CARGO/serde-1.0.219/src/ser/mod.rs
   |
   |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
   |        --------------- required by a bound in this associated function
   |     where
   |         T: ?Sized + Serialize;
   |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
   = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CustomCollection: Deserialize<'_>` is not satisfied
  --> tests/compile_fail/mongo_collection_type.rs:28:28
   |
28 |         pub BadCollection: CustomCollection,
   |                            ^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `CustomCollection`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CustomCollection` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             &'a [u8]
             &'a bson::raw::array::RawArray
             &'a bson::raw::document::RawDocument
             &'a serde_bytes::bytearray::ByteArray<N>
             &'a serde_bytes::bytes::Bytes
             &'a std::path::Path
             &'a str
             ()
           and $N others
note: required by a bound in `next_element`
  --> $CARGO/serde-1.0.219/src/de/mod.rs
   |
   |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
   |        ------------ required by a bound in this associated function
   |     where
   |         T: Deserialize<'de>,
   |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `CustomCollection: Deserialize<'_>` is not satisfied
  --> tests/compile_fail/mongo_collection_type.rs:28:28
   |
28 |         pub BadCollection: CustomCollection,
   |                            ^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `CustomCollection`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CustomCollection` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             &'a [u8]
             &'a bson::raw::array::RawArray
             &'a bson::raw::document::RawDocument
             &'a serde_bytes::bytearray::ByteArray<N>
             &'a serde_bytes::bytes::Bytes
             &'a std::path::Path
             &'a str
             ()
           and $N others
note: required by a bound in `next_value`
  --> $CARGO/serde-1.0.219/src/de/mod.rs
   |
   |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
   |        ---------- required by a bound in this associated function
   |     where
   |         V: Deserialize<'de>,
   |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `CustomCollection: Deserialize<'_>` is not satisfied
  --> tests/compile_fail/mongo_collection_type.rs:25:39
   |
25 |     #[derive(Debug, Clone, Serialize, Deserialize, FieldWitnesses, MongoComparable)]
   |                                       ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `CustomCollection`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `CustomCollection` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             &'a [u8]
             &'a bson::raw::array::RawArray
             &'a bson::raw::document::RawDocument
             &'a serde_bytes::bytearray::ByteArray<N>
             &'a serde_bytes::bytes::Bytes
             &'a std::path::Path
             &'a str
             ()
           and $N others
note: required by a bound in `_::_serde::__private::de::missing_field`
  --> $CARGO/serde-1.0.219/src/private/de.rs
   |
   | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
   | where
   |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)
