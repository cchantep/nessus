name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        include:
          - rust: nightly
            allow_failure: true
    continue-on-error: ${{ matrix.allow_failure || false }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'
    
    - name: Build
      run: cargo build --verbose --all-features
    
    - name: Run tests
      run: cargo test --verbose --all-features
    
    - name: Run doctests
      run: cargo test --doc --all-features

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-check-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-check-
          ${{ runner.os }}-cargo-
    
    - name: Check workspace
      run: cargo check --workspace --all-targets --all-features

  doc_validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-validation-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-docs-validation-
          ${{ runner.os }}-cargo-
    
    - name: Build API documentation
      run: |
        cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: -D warnings

    - name: Setup Ruby for Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        working-directory: ./docs

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Jekyll dependencies
      run: |
        cd docs
        gem install bundler
        bundle install

    - name: Validate Jekyll build
      run: |
        cd docs
        bundle exec jekyll build --destination ../_site_validation
        echo "✅ Jekyll build validation successful"

    - name: Check for broken internal links
      run: |
        # Basic validation of internal markdown links (excluding vendor directories)
        find docs -name "*.md" -type f -not -path "*/vendor/*" -not -path "*/.bundle/*" -exec grep -H '\[.*\](.*\.md)' {} \; | while IFS=: read -r file link; do
          # Extract the link path
          link_path=$(echo "$link" | sed -n 's/.*(\([^)]*\.md\)).*/\1/p')
          if [[ -n "$link_path" && "$link_path" != http* ]]; then
            # Convert relative path to absolute
            if [[ "$link_path" = /* ]]; then
              full_path="docs$link_path"
            else
              dir=$(dirname "$file")
              full_path="$dir/$link_path"
            fi
            if [[ ! -f "$full_path" ]]; then
              echo "❌ Broken link in $file: $link_path (resolved to $full_path)"
              exit 1
            fi
          fi
        done
        echo "✅ Internal link validation successful"

  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-docs-
          ${{ runner.os }}-cargo-

    - name: Setup Pages (for deployment)
      uses: actions/configure-pages@v5
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    - name: Build API documentation
      run: |
        cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: -D warnings

    - name: Setup Ruby for Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        working-directory: ./docs
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    - name: Install Jekyll dependencies
      run: |
        cd docs
        gem install bundler
        bundle install
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    - name: Build user guide with Jekyll
      run: |
        cd docs
        bundle exec jekyll build --destination ../_site
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    - name: Combine documentation
      run: |
        # Create the final documentation structure
        mkdir -p _site/api
        cp -r target/doc/* _site/api/
        
        # Create main index page that redirects to user guide
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Tnuctipun Documentation</title>
            <meta http-equiv="refresh" content="0; url=./user-guide/">
        </head>
        <body>
            <p><a href="./user-guide/">Go to User Guide</a></p>
            <p><a href="./api/tnuctipun/">Go to API Documentation</a></p>
        </body>
        </html>
        EOF
        
        # Update user guide to link to API docs
        find _site -name "*.html" -type f -exec sed -i 's|https://cchantep.github.io/tnuctipun/tnuctipun/|../api/tnuctipun/|g' {} \;
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      with:
        path: ./_site

  deploy-docs:
    name: Deploy Docs
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs:
      - doc_validation
      - doc_snippets
      - docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: ${{ runner.os }}-cargo-audit
    
    - name: Install cargo-audit
      run: |
        if ! command -v cargo-audit &> /dev/null; then
          cargo install cargo-audit
        else
          echo "cargo-audit is already installed"
        fi
    
    - name: Run security audit
      run: cargo audit

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          ${{ runner.os }}-cargo-
  
    - name: Clean trybuild cache
      run: rm -rf target/tests/trybuild/
      continue-on-error: true
    
    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      if: env.CODECOV_TOKEN != null
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  doc_snippets:
    name: Documentation Snippets
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-doc-snippets-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-doc-snippets-
          ${{ runner.os }}-cargo-
    
    - name: Build doc-checker
      run: cd tools/doc-checker && go build -o doc-checker .
    
    - name: Check documentation snippets
      run: ./tools/doc-checker/doc-checker -o json
